# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Android.gitlab-ci.yml

# Read more about this script on this blog post https://about.gitlab.com/2018/10/24/setting-up-gitlab-ci-for-android-projects/, by Jason Lenny
# If you are interested in using Android with FastLane for publishing take a look at the Android-Fastlane template.
stages:
  - build
  - test
  - deploy
  - notify

image: openjdk:11-jdk


variables:

  # ANDROID_COMPILE_SDK is the version of Android you're compiling with.
  # It should match compileSdkVersion.
  ANDROID_COMPILE_SDK: "30"

  # ANDROID_BUILD_TOOLS is the version of the Android build tools you are using.
  # It should match buildToolsVersion.
  ANDROID_BUILD_TOOLS: "30.0.3"

  # It's what version of the command line tools we're going to download from the official site.
  # Official Site-> https://developer.android.com/studio/index.html
  # There, look down below at the cli tools only, sdk tools package is of format:
  #        commandlinetools-os_type-ANDROID_SDK_TOOLS_latest.zip
  # when the script was last modified for latest compileSdkVersion, it was which is written down below
  ANDROID_SDK_TOOLS: "7583922"

# Packages installation before running script
before_script:
  - apt-get --quiet update --yes
  - apt-get --quiet install --yes wget tar unzip lib32stdc++6 lib32z1

  # Setup path as ANDROID_HOME for moving/exporting the downloaded sdk into it
  - export ANDROID_HOME="${PWD}/android-home"
  # Create a new directory at specified location
  - install -d $ANDROID_HOME
  # Here we are installing androidSDK tools from official source,
  # (the key thing here is the url from where you are downloading these sdk tool for command line, so please do note this url pattern there and here as well)
  # after that unzipping those tools and
  # then running a series of SDK manager commands to install necessary android SDK packages that'll allow the app to build
  - wget --output-document=$ANDROID_HOME/cmdline-tools.zip https://dl.google.com/android/repository/commandlinetools-linux-${ANDROID_SDK_TOOLS}_latest.zip
  # move to the archive at ANDROID_HOME
  - pushd $ANDROID_HOME
  - unzip -d cmdline-tools cmdline-tools.zip
  - pushd cmdline-tools
  # since commandline tools version 7583922 the root folder is named "cmdline-tools" so we rename it if necessary
  - mv cmdline-tools tools || true
  - popd
  - popd
  - export PATH=$PATH:${ANDROID_HOME}/cmdline-tools/tools/bin/

  # Nothing fancy here, just checking sdkManager version
  - sdkmanager --version

  # use yes to accept all licenses
  - yes | sdkmanager --licenses || true
  - sdkmanager "platforms;android-${ANDROID_COMPILE_SDK}"
  - sdkmanager "platform-tools"
  - sdkmanager "build-tools;${ANDROID_BUILD_TOOLS}"

  # Not necessary, but just for surity
  - chmod +x ./gradlew
  # Check linting


# Make Project
assemblePaidDebug:
  interruptible: true
  stage: build
  script:
    - ./gradlew assemblePaidDebug

  artifacts:
    paths:
      - app/build/outputs/apk/debug/app-paid-debug.apk

assembleUnPaidDebug:
  interruptible: true
  stage: build
  script:
    - ./gradlew assembleUnpaindDebug

  artifacts:
    paths:
      - app/build/outputs/apk/debug/app-unpaind-debug.apk


assemblePaidRelease:
  interruptible: true
  stage: build
  script:
    - ./gradlew assemblePaidRelease
  artifacts:
    paths:
      - app/build/outputs/apk/release/app-paid-release-unsigned.apk

assembleUnPaidRelease:
  interruptible: true
  stage: build
  script:
    - ./gradlew assembleUnpaindRelease
  artifacts:
    paths:
      - app/build/outputs/apk/release/app-unpaind-release-unsigned.apk



assemblePaidPilot:
  interruptible: true
  stage: build
  script:
    - ./gradlew assemblePaidPilot
  artifacts:
    paths:
      - app/build/outputs/apk/pilot/app-paid-pilot-pilot.apk

assembleUnPaidPilot:
  interruptible: true
  stage: build
  script:
    - ./gradlew assembleUnpaindPilot
  artifacts:
    paths:
      - app/build/outputs/apk/pilot/app-unpaind-pilot-pilot.apk



# Run all tests, if any fails, interrupt the pipeline(fail it)

# Run all tests, if any fails, interrupt the pipeline(fail it)
debugTests:
  interruptible: true
  stage: test
  script:
    - ./gradlew -Pci --console=plain :app:testDebug
   
  artifacts:
    paths:
      - app/build/reports/tests/testDebugUnitTest/classes/com.example.chatapp.SignUpValidateTest.html
    when: on_failure



distributePaidPilot:
  stage: deploy
  image: node:16.13.0
  before_script:
    - npm install -g firebase-tools
  script:
    - firebase appdistribution:distribute app/build/outputs/apk/pilot/app-paid-pilot-pilot.apk --app $FIREBASE_APP_ID_PAID --groups "pt"   --release-notes "this paid pilot version is send to the Paid Pilot Testers group " --token $FIREBASE_TOKEN    
     

distributeUnPaidPilot:
  stage: deploy
  image: node:16.13.0
  before_script:
    - npm install -g firebase-tools
  script:
    - firebase appdistribution:distribute app/build/outputs/apk/pilot/app-unpaind-pilot-pilot.apk --app $FIREBASE_APP_ID_UN_PAID --groups "pt"   --release-notes "this un paid pilot version is send to the unPaid Pilot Testers group " --token $FIREBASE_TOKEN    



distributePaidRelease:
  stage: deploy
  image: node:16.13.0
  before_script:
    - npm install -g firebase-tools
  script:
    - firebase appdistribution:distribute app/build/outputs/apk/release/app-paid-release-unsigned.apk --app $FIREBASE_APP_ID_PAID --groups "rt"   --release-notes "this paid release version is send to the Paid release Testers group " --token $FIREBASE_TOKEN    


distributeUnPaidRelease:
  stage: deploy
  image: node:16.13.0
  before_script:
    - npm install -g firebase-tools
  script:
    - firebase appdistribution:distribute app/build/outputs/apk/relase/app-unpaind-release-unsigned.apk --app $FIREBASE_APP_ID_UN_PAID --groups "rt"   --release-notes "this un paid release version is send to the un Paid release Testers group " --token $FIREBASE_TOKEN    


distributePaidDebug:
  stage: deploy
  image: node:16.13.0
  before_script:
    - npm install -g firebase-tools
  script:
    - firebase appdistribution:distribute app/build/outputs/apk/debug/app-paid-debug.apk --app $FIREBASE_APP_ID_PAID --groups "qa"   --release-notes "this paid debug version is send to the Paid debug Testers group " --token $FIREBASE_TOKEN    


distributeUnPaidDebug:
  stage: deploy
  image: node:16.13.0
  before_script:
    - npm install -g firebase-tools
  script:
    - firebase appdistribution:distribute app/build/outputs/apk/debug/app-unpaind-debug.apk --app $FIREBASE_APP_ID_UN_PAID --groups "qa"   --release-notes "this un paid release version is send to the un Paid debug Testers group " --token $FIREBASE_TOKEN    



send_email:
  stage: notify 

  script: curl -s --user "api:$MAILGUN_API_KEY" 
      "https://api.mailgun.net/v3/$MAILGUN_DOMAIN/messages"
      -F from='Fawry Training <mobile_development_training@fawry.com>'
      -F to="mohamedhunter6@gmail.com"
      -F subject='Test results Report'
      -F text='Testing the app, the attachment file contain the testing app result'
      -F attachment='@app/build/reports/tests/testDebugUnitTest/classes/com.example.chatapp.SignUpValidateTest.html'
  dependencies:
     - debugTests
  when: on_failure 
